// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/blablatov/scada-bidirectional-grpc-cloud/grpc-cloud-proto (interfaces: CloudExchangeClient)

// Package mock_grpc_cloud_proto is a generated GoMock package.
package mock_grpc_cloud_proto

import (
	context "context"
	reflect "reflect"

	__ "github.com/blablatov/scada-bidirectional-grpc-cloud/grpc-cloud-proto"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockCloudExchangeClient is a mock of CloudExchangeClient interface.
type MockCloudExchangeClient struct {
	ctrl     *gomock.Controller
	recorder *MockCloudExchangeClientMockRecorder
}

// MockCloudExchangeClientMockRecorder is the mock recorder for MockCloudExchangeClient.
type MockCloudExchangeClientMockRecorder struct {
	mock *MockCloudExchangeClient
}

// NewMockCloudExchangeClient creates a new mock instance.
func NewMockCloudExchangeClient(ctrl *gomock.Controller) *MockCloudExchangeClient {
	mock := &MockCloudExchangeClient{ctrl: ctrl}
	mock.recorder = &MockCloudExchangeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudExchangeClient) EXPECT() *MockCloudExchangeClientMockRecorder {
	return m.recorder
}

// ProcessCloud mocks base method.
func (m *MockCloudExchangeClient) ProcessCloud(arg0 context.Context, arg1 ...grpc.CallOption) (__.CloudExchange_ProcessCloudClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProcessCloud", varargs...)
	ret0, _ := ret[0].(__.CloudExchange_ProcessCloudClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessCloud indicates an expected call of ProcessCloud.
func (mr *MockCloudExchangeClientMockRecorder) ProcessCloud(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessCloud", reflect.TypeOf((*MockCloudExchangeClient)(nil).ProcessCloud), varargs...)
}
